package com.ym.learn.demo.sorts;

/**
 * 归并排序2
 */
public class MergeSorting2 {
    /**
     * 合并两个有序子序列
     *
     * @param arr   待合并数组
     * @param left  待合并数组最小下标
     * @param mid   待合并数组中间下标
     * @param right 待合并数组最大下标
     */
    private static void sort(int[] arr, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];//临时数组，用来保存每次合并之后的结果
        int i = left;
        int j = mid + 1;
        int k = 0;//临时数组初始下标
        //这个while循环能够初步筛选出待合并的两个子序列中较小的数
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }
        //将左边序列中剩余的数放入临时数组
        while (i <= mid) {
            temp[k++] = arr[i++];
        }
        //将右边序列中剩余的数放入临时数组
        while (j <= right) {
            temp[k++] = arr[j++];
        }
        //将临时数组中的元素对应 到真实数组中
        for (int m = 0; m < temp.length; m++) {
            arr[m + left] = temp[m];
        }
    }

    /**
     * 递归拆分
     *
     * @param arr   待拆分数组
     * @param left  待拆分数组最小下标
     * @param right 待拆分数组最大下标
     */
    private static void mergeSort(int[] arr, int left, int right) {
        int mid = (left + right) / 2; //中间下标
        if (left < right) {
            mergeSort(arr, left, mid);//递归拆分左边
            mergeSort(arr, mid + 1, right);//递归拆分右边
            sort(arr, left, mid, right);//合并左右
        }
    }

    private static void printNumbers(int[] input) {
        for (int i = 0; i < input.length; i++) {
            System.out.print(input[i] + ",");
        }
        System.out.println("\n");
    }

    public static void main(String[] args) {
        int[] arr = {24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43,24, 2, 45, 20, 56, 75, 2, 56, 99, 53, 12,45, 23, 11, 89, 77, 98, 4, 28, 65, 43};
        Long start = System.currentTimeMillis();
        mergeSort(arr, 0, arr.length - 1);
        for (int i = 0;i<1000000000;i++){
            int a = 1;
        }
        Long time = System.currentTimeMillis()-start;
        System.out.println("time= "+time);
        printNumbers(arr);
    }
}
